/*
1. You are given a number n, representing the count of elements.
2. You are given n numbers.
3. You are required to find the span of input. Span is defined as difference of maximum value and minimum value.
Input Format
A number n
n1
n2
.. n number of elements
Output Format
A number representing max - min
Constraints
1 <= n <= 10^4
0 <= n1, n2
 .. n elements <= 10 ^9
Sample Input
6
15
30
40
4
11
9
Sample Output
36

*/


// We can solve this problem by two ways first is the we need to sort the array and then take the difference b/w last index and first index 
// element of array time complexity for this O(nlogn) Space complexity O(1)

// Another approach is first we take both min and max value on zero index element and then traverse the array if we get max value greater then the previous
// value then update the max value same for to find the min value. Here we traverse the array O(n) times so the time complexity of this is O(n) and we
// didn't use any extra space so the space complexity of this is O(1).

import java.io.*;
import java.util.*;

public class Main{

public static void main(String[] args) throws Exception {
    // write your code here
    
    
    Scanner sc = new Scanner(System.in);
    
    int n = sc.nextInt();
    
    int arr[] = new int[n];
    
    for(int i = 0;i<n;i++)
    {
        arr[i] = sc.nextInt();
    }
    
    int max = arr[0];
    int min = arr[0];
    for(int i = 0;i<n;i++)
    {
        if(arr[i] > max)
        {
            max = arr[i];
        }
    }
    for(int i = 0;i<n;i++)
    {
        if(arr[i] < min)
        {
            min = arr[i];
        }
    }
    int span_difference = max - min;
    System.out.println(span_difference);
    
 }

}

/*
Time complexity --  
Brute froce approach  - O(NlogN)
Average case - O(N)

Space complexity 
Best and Average case  - O(1) or constant space.
**/





